package httpd

import (
	"net/http"
	"log/slog"
	"time"

	scalargo "github.com/bdpiprava/scalar-go"
	"github.com/gin-contrib/cors"
	"github.com/gin-gonic/gin"
	_ "{{.ModuleName}}/docs"
	"{{.ModuleName}}/internal/config"
	"{{.ModuleName}}/internal/domain"
	"{{.ModuleName}}/internal/entrypoint/httpd/router"
	"{{.ModuleName}}/internal/entrypoint/httpd/schema"
	"{{.ModuleName}}/internal/middleware"
	"github.com/zeroxsolutions/sazabi"
	"go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin"
)

// @BasePath /
// @title {{.RepoName}} API docs
// @version v1
// @description {{.RepoName}} API docs
func NewHTTPServer(
	appConfig *config.App,
	healthRouter *router.HealthRouter,
	readyRouter *router.ReadyRouter,
	logger *slog.Logger,
) *gin.Engine {
	gin.SetMode(gin.ReleaseMode)
	if appConfig.Server.Debug {
		gin.SetMode(gin.DebugMode)
	}
	ginDefault := gin.Default()
	// Configure CORS
	corsConfig := cors.DefaultConfig()
	corsConfig.AllowOrigins = appConfig.Server.AllowedOrigins
	corsConfig.AllowMethods = appConfig.Server.AllowedMethods
	corsConfig.AllowHeaders = appConfig.Server.AllowedHeaders
	corsConfig.AllowCredentials = appConfig.Server.AllowCredentials
	maxAge, err := time.ParseDuration(appConfig.Server.MaxAge)
	if err != nil {
		sazabi.Fatalf("failed to parse max age: %v", err)
	}
	corsConfig.MaxAge = maxAge
	ginDefault.Use(cors.New(corsConfig))
	ginDefault.Use(gin.Recovery())
	ginDefault.Use(gin.LoggerWithConfig(gin.LoggerConfig{
		SkipPaths: []string{"/health", "/ready", "/docs"},
	}))
	ginDefault.Use(otelgin.Middleware(appConfig.OTEL.ServiceName))
	ginDefault.Use(middleware.NewLoggerMiddleware(logger))
	healthRouter.RegisterRoutes(ginDefault.Group("/health"))
	readyRouter.RegisterRoutes(ginDefault.Group("/ready"))
	ginDefault.GET("/docs", func(ctx *gin.Context) {
		html, err := scalargo.NewV2(
			scalargo.WithSpecDir("./docs"),
			scalargo.WithBaseFileName("swagger.json"),
		)
		if err != nil {
			ctx.JSON(http.StatusInternalServerError, schema.ErrorResponse{
				Error: domain.NewError(domain.ErrorCodeInternalServerError, err.Error()),
			})
			return
		}
		ctx.Data(http.StatusOK, "text/html; charset=utf-8", []byte(html))
	})
	return ginDefault
}
