name: Build and Release CLI

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Build for multiple platforms
        run: |
          # Build for Linux AMD64
          GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o beginning-linux-amd64 .
          
          # Build for Linux ARM64
          GOOS=linux GOARCH=arm64 go build -ldflags="-s -w" -o beginning-linux-arm64 .
          
          # Build for macOS AMD64
          GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -o beginning-darwin-amd64 .
          
          # Build for macOS ARM64
          GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w" -o beginning-darwin-arm64 .
          
          # Build for Windows AMD64
          GOOS=windows GOARCH=amd64 go build -ldflags="-s -w" -o beginning-windows-amd64.exe
          
          # Build for Windows ARM64
          GOOS=windows GOARCH=arm64 go build -ldflags="-s -w" -o beginning-windows-arm64.exe

      - name: Create release archive
        run: |
          # Create tar.gz for Linux
          tar -czf beginning-linux-amd64.tar.gz beginning-linux-amd64 template/
          tar -czf beginning-linux-arm64.tar.gz beginning-linux-arm64 template/
          
          # Create tar.gz for macOS
          tar -czf beginning-darwin-amd64.tar.gz beginning-darwin-amd64 template/
          tar -czf beginning-darwin-arm64.tar.gz beginning-darwin-arm64 template/
          
          # Create zip for Windows
          zip beginning-windows-amd64.zip beginning-windows-amd64.exe template/
          zip beginning-windows-arm64.zip beginning-windows-arm64.exe template/
          
          # List created files
          echo "Created release archives:"
          ls -la *.tar.gz *.zip
          
          # Verify file sizes
          echo "File sizes:"
          du -h *.tar.gz *.zip

      - name: Install oras CLI tool
        run: |
          # Install oras CLI tool using official method
          echo "Installing oras CLI tool..."
          
          # Method 1: Try downloading from GitHub releases
          echo "Method 1: Downloading from GitHub releases..."
          LATEST_VERSION=$(curl -s https://api.github.com/repos/oras-project/oras/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
          echo "Latest oras version: $LATEST_VERSION"
          
          # Download and install
          curl -L -o oras.tar.gz "https://github.com/oras-project/oras/releases/download/${LATEST_VERSION}/oras_linux_amd64.tar.gz"
          
          # Verify download
          ls -la oras.tar.gz
          file oras.tar.gz
          
          # Extract
          tar -xzf oras.tar.gz
          ls -la
          
          # Install
          sudo mv oras /usr/local/bin/
          
          # Verify installation
          oras version
          echo "oras CLI tool installed successfully"
          
          # Check PATH
          which oras
          echo "oras location: $(which oras)"
          
          # Method 2: Fallback to Go install if Method 1 fails
          if ! command -v oras &> /dev/null; then
            echo "Method 1 failed, trying Method 2: Go install..."
            go install oras.land/oras/cmd/oras@latest
            echo "oras installed via Go: $(which oras)"
          fi
          
          # Final verification
          echo "Final oras verification:"
          oras version
          echo "oras location: $(which oras)"
          echo "oras PATH: $PATH"
          
          # Test oras functionality
          echo "Testing oras functionality..."
          oras --help | head -5

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push CLI tool to GitHub Container Registry
        run: |
          # Extract version from tag (remove 'v' prefix)
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}
          
          echo "Pushing version: $VERSION to GitHub Container Registry"
          
          # Push CLI tool as OCI artifact to GitHub Container Registry
          oras push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION \
            --manifest '{"name":"beginning","version":"'$VERSION'","type":"cli"}' \
            beginning-linux-amd64.tar.gz:application/gzip \
            beginning-linux-arm64.tar.gz:application/gzip \
            beginning-darwin-amd64.tar.gz:application/gzip \
            beginning-darwin-arm64.tar.gz:application/gzip \
            beginning-windows-amd64.zip:application/zip \
            beginning-windows-arm64.zip:application/zip
          
          echo "Successfully pushed version $VERSION"
          
          # Also push with latest tag
          oras push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            --manifest '{"name":"beginning","version":"'$VERSION'","type":"cli"}' \
            beginning-linux-amd64.tar.gz:application/gzip \
            beginning-linux-arm64.tar.gz:application/gzip \
            beginning-darwin-amd64.tar.gz:application/gzip \
            beginning-darwin-arm64.tar.gz:application/gzip \
            beginning-windows-amd64.zip:application/zip \
            beginning-windows-arm64.zip:application/zip
          
          echo "Successfully pushed latest tag"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            beginning-linux-amd64.tar.gz
            beginning-linux-arm64.tar.gz
            beginning-darwin-amd64.tar.gz
            beginning-darwin-arm64.tar.gz
            beginning-windows-amd64.zip
            beginning-windows-arm64.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 